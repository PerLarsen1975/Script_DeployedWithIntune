##################################################################################################
<#
.SYNOPSIS
This is a script that creates the a AaronLocker baseline
get AaronLocker from https://github.com/Microsoft/AaronLocker

.NOTES
    FileName:    AaronLocker - Intune Config.ps1
    Author:      Per Larsen
    Created:     08-12-2019
    Product:     Aaronlocker with Mobile Device Management
    Version:     1.0
    
#>
###################################################################################################
<#

.COPYRIGHT
Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
See LICENSE in the project root for license information.

#>

####################################################

function Get-AuthToken {

<#
.SYNOPSIS
This function is used to authenticate with the Graph API REST interface
.DESCRIPTION
The function authenticate with the Graph API Interface with the tenant name
.EXAMPLE
Get-AuthToken
Authenticates you with the Graph API interface
.NOTES
NAME: Get-AuthToken
#>

[cmdletbinding()]

param
(
    [Parameter(Mandatory=$true)]
    $User
)

$userUpn = New-Object "System.Net.Mail.MailAddress" -ArgumentList $User

$tenant = $userUpn.Host

Write-Host "Checking for AzureAD module..."

    $AadModule = Get-Module -Name "AzureAD" -ListAvailable

    if ($AadModule -eq $null) {

        Write-Host "AzureAD PowerShell module not found, looking for AzureADPreview"
        $AadModule = Get-Module -Name "AzureADPreview" -ListAvailable

    }

    if ($AadModule -eq $null) {
        write-host
        write-host "AzureAD Powershell module not installed..." -f Red
        write-host "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellow
        write-host "Script can't continue..." -f Red
        write-host
        exit
    }

# Getting path to ActiveDirectory Assemblies
# If the module count is greater than 1 find the latest version

    if($AadModule.count -gt 1){

        $Latest_Version = ($AadModule | select version | Sort-Object)[-1]

        $aadModule = $AadModule | ? { $_.version -eq $Latest_Version.version }

            # Checking if there are multiple versions of the same module found

            if($AadModule.count -gt 1){

            $aadModule = $AadModule | select -Unique

            }

        $adal = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

    else {

        $adal = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

[System.Reflection.Assembly]::LoadFrom($adal) | Out-Null

[System.Reflection.Assembly]::LoadFrom($adalforms) | Out-Null

$clientId = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"

$redirectUri = "urn:ietf:wg:oauth:2.0:oob"

$resourceAppIdURI = "https://graph.microsoft.com"

$authority = "https://login.microsoftonline.com/$Tenant"

    try {

    $authContext = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext" -ArgumentList $authority

    # https://msdn.microsoft.com/en-us/library/azure/microsoft.identitymodel.clients.activedirectory.promptbehavior.aspx
    # Change the prompt behaviour to force credentials each time: Auto, Always, Never, RefreshSession

    $platformParameters = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.PlatformParameters" -ArgumentList "Auto"

    $userId = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier" -ArgumentList ($User, "OptionalDisplayableId")

    $authResult = $authContext.AcquireTokenAsync($resourceAppIdURI,$clientId,$redirectUri,$platformParameters,$userId).Result

        # If the accesstoken is valid then create the authentication header

        if($authResult.AccessToken){

        # Creating header for Authorization token

        $authHeader = @{
            'Content-Type'='application/json'
            'Authorization'="Bearer " + $authResult.AccessToken
            'ExpiresOn'=$authResult.ExpiresOn
            }

        return $authHeader

        }

        else {

        Write-Host
        Write-Host "Authorization Access Token is null, please re-run authentication..." -ForegroundColor Red
        Write-Host
        break

        }

    }

    catch {

    write-host $_.Exception.Message -f Red
    write-host $_.Exception.ItemName -f Red
    write-host
    break

    }

}

####################################################

Function Add-DeviceConfigurationPolicy(){

<#
.SYNOPSIS
This function is used to add an device configuration policy using the Graph API REST interface
.DESCRIPTION
The function connects to the Graph API Interface and adds a device configuration policy
.EXAMPLE
Add-DeviceConfigurationPolicy -JSON $JSON
Adds a device configuration policy in Intune
.NOTES
NAME: Add-DeviceConfigurationPolicy
#>

[cmdletbinding()]

param
(
    $JSON
)

$graphApiVersion = "Beta"
$DCP_resource = "deviceManagement/deviceConfigurations"
Write-Verbose "Resource: $DCP_resource"

    try {

        if($JSON -eq "" -or $JSON -eq $null){

        write-host "No JSON specified, please specify valid JSON for the Android Policy..." -f Red

        }

        else {

        Test-JSON -JSON $JSON

        $uri = "https://graph.microsoft.com/$graphApiVersion/$($DCP_resource)"
        Invoke-RestMethod -Uri $uri -Headers $authToken -Method Post -Body $JSON -ContentType "application/json"

        }

    }

    catch {

    $ex = $_.Exception
    $errorResponse = $ex.Response.GetResponseStream()
    $reader = New-Object System.IO.StreamReader($errorResponse)
    $reader.BaseStream.Position = 0
    $reader.DiscardBufferedData()
    $responseBody = $reader.ReadToEnd();
    Write-Host "Response content:`n$responseBody" -f Red
    Write-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"
    write-host
    break

    }

}

####################################################

Function Test-JSON(){

<#
.SYNOPSIS
This function is used to test if the JSON passed to a REST Post request is valid
.DESCRIPTION
The function tests if the JSON passed to the REST Post is valid
.EXAMPLE
Test-JSON -JSON $JSON
Test if the JSON is valid before calling the Graph REST interface
.NOTES
NAME: Test-AuthHeader
#>

param (

$JSON

)

    try {

    $TestJSON = ConvertFrom-Json $JSON -ErrorAction Stop
    $validJson = $true

    }

    catch {

    $validJson = $false
    $_.Exception

    }

    if (!$validJson){

    Write-Host "Provided JSON isn't in valid JSON format" -f Red
    break

    }

}

####################################################

#region Authentication

write-host

# Checking if authToken exists before running authentication
if($global:authToken){

    # Setting DateTime to Universal time to work in all timezones
    $DateTime = (Get-Date).ToUniversalTime()

    # If the authToken exists checking when it expires
    $TokenExpires = ($authToken.ExpiresOn.datetime - $DateTime).Minutes

        if($TokenExpires -le 0){

        write-host "Authentication Token expired" $TokenExpires "minutes ago" -ForegroundColor Yellow
        write-host

            # Defining User Principal Name if not present

            if($User -eq $null -or $User -eq ""){

            $User = Read-Host -Prompt "Please specify your user principal name for Azure Authentication"
            Write-Host

            }

        $global:authToken = Get-AuthToken -User $User

        }
}

# Authentication doesn't exist, calling Get-AuthToken function

else {

    if($User -eq $null -or $User -eq ""){

    $User = Read-Host -Prompt "Please specify your user principal name for Azure Authentication"
    Write-Host

    }

# Getting the authorization token
$global:authToken = Get-AuthToken -User $User

}

#endregion


####################################################

$Aaronlocker = @"

{
    "@odata.type":  "#microsoft.graph.windows10CustomConfiguration",
    "id":  "3885eed4-a552-46d4-876b-eadbbcf1ef83",
    "description":  "AaronLocker Enforce configuration for AppLocker Configuration.",
    "displayName":  "AaronLocker - AppLocker Configuration",
    "version":  9,
    "omaSettings":  [
        {
            "@odata.type":  "#microsoft.graph.omaSettingStringXml",
            "displayName":  "AaronLocker Store Apps",
            "description":  "AppLocker configuration for Microsoft store applications",
            "omaUri":  "./Vendor/MSFT/AppLocker/ApplicationLaunchRestrictions/StoreAppsGroup/StoreApps/Policy",
            "fileName":  "AppLockerRules-20191123-2058-Enforce - APPX.xml",
            "value":  "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjxSdWxlQ29sbGVjdGlvbiBUeXBlPSJBcHB4IiBFbmZvcmNlbWVudE1vZGU9IkVuYWJsZWQiPg0KICAgIDxGaWxlUHVibGlzaGVyUnVsZSBJZD0iYTllMThjMjEtZmY4Zi00M2NmLWI5ZmMtZGI0MGVlZDY5M2JhIiBOYW1lPSIoRGVmYXVsdCBSdWxlKSBBbGwgc2lnbmVkIHBhY2thZ2VkIGFwcHMiIERlc2NyaXB0aW9uPSJBbGxvd3MgbWVtYmVycyBvZiB0aGUgRXZlcnlvbmUgZ3JvdXAgdG8gcnVuIHBhY2thZ2VkIGFwcHMgdGhhdCBhcmUgc2lnbmVkLiIgVXNlck9yR3JvdXBTaWQ9IlMtMS0xLTAiIEFjdGlvbj0iQWxsb3ciPg0KICAgICAgPENvbmRpdGlvbnM+DQogICAgICAgIDxGaWxlUHVibGlzaGVyQ29uZGl0aW9uIFB1Ymxpc2hlck5hbWU9IioiIFByb2R1Y3ROYW1lPSIqIiBCaW5hcnlOYW1lPSIqIj4NCiAgICAgICAgICA8QmluYXJ5VmVyc2lvblJhbmdlIExvd1NlY3Rpb249IjAuMC4wLjAiIEhpZ2hTZWN0aW9uPSIqIiAvPg0KICAgICAgICA8L0ZpbGVQdWJsaXNoZXJDb25kaXRpb24+DQogICAgICA8L0NvbmRpdGlvbnM+DQogICAgPC9GaWxlUHVibGlzaGVyUnVsZT4NCiAgPC9SdWxlQ29sbGVjdGlvbj4="
        },
        {
            "@odata.type":  "#microsoft.graph.omaSettingStringXml",
            "displayName":  "AaronLocker EXE",
            "description":  "AppLocker configuration for executables",
            "omaUri":  "./Vendor/MSFT/AppLocker/ApplicationLaunchRestrictions/EXEGroup/EXE/Policy",
            "fileName":  "AppLockerRules-20191123-2058-Enforce - EXE.xml",
            "value":  ""
        },
        {
            "@odata.type":  "#microsoft.graph.omaSettingStringXml",
            "displayName":  "AaronLocker MSI",
            "description":  "AppLocker configuration for MSIs",
            "omaUri":  "./Vendor/MSFT/AppLocker/ApplicationLaunchRestrictions/MSIGroup/MSI/Policy",
            "fileName":  "AppLockerRules-20191123-2058-Enforce - MSI.xml",
            "value":  "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjxSdWxlQ29sbGVjdGlvbiBUeXBlPSJNc2kiIEVuZm9yY2VtZW50TW9kZT0iRW5hYmxlZCI+DQogICAgPEZpbGVQYXRoUnVsZSBJZD0iYzY0ZTUyZmUtYmQwNS00M2VkLWFlOTEtZjM2MTIxODI4MjllIiBOYW1lPSJBbGwgV2luZG93cyBJbnN0YWxsZXIgZmlsZXMgdW5kZXIgJXdpbmRpciVcY2NtY2FjaGUiIERlc2NyaXB0aW9uPSJBbGxvd3MgZXZlcnlvbmUgdG8gcnVuIGluc3RhbGxlciBmaWxlcyBpbiB0aGUgU0NDTSBjYWNoZS4iIFVzZXJPckdyb3VwU2lkPSJTLTEtMS0wIiBBY3Rpb249IkFsbG93Ij4NCiAgICAgIDxDb25kaXRpb25zPg0KICAgICAgICA8RmlsZVBhdGhDb25kaXRpb24gUGF0aD0iJVdJTkRJUiVcY2NtY2FjaGVcKiIgLz4NCiAgICAgIDwvQ29uZGl0aW9ucz4NCiAgICA8L0ZpbGVQYXRoUnVsZT4NCiAgICA8RmlsZVBhdGhSdWxlIElkPSI1YjI5MDE4NC0zNDVhLTQ0NTMtYjE4NC00NTMwNWY2ZDlhNTQiIE5hbWU9IihEZWZhdWx0IFJ1bGUpIEFsbCBXaW5kb3dzIEluc3RhbGxlciBmaWxlcyBpbiAlc3lzdGVtZHJpdmUlXFdpbmRvd3NcSW5zdGFsbGVyIiBEZXNjcmlwdGlvbj0iQWxsb3dzIG1lbWJlcnMgb2YgdGhlIEV2ZXJ5b25lIGdyb3VwIHRvIHJ1biBhbGwgV2luZG93cyBJbnN0YWxsZXIgZmlsZXMgbG9jYXRlZCBpbiAlc3lzdGVtZHJpdmUlXFdpbmRvd3NcSW5zdGFsbGVyLiIgVXNlck9yR3JvdXBTaWQ9IlMtMS0xLTAiIEFjdGlvbj0iQWxsb3ciPg0KICAgICAgPENvbmRpdGlvbnM+DQogICAgICAgIDxGaWxlUGF0aENvbmRpdGlvbiBQYXRoPSIlV0lORElSJVxJbnN0YWxsZXJcKiIgLz4NCiAgICAgIDwvQ29uZGl0aW9ucz4NCiAgICA8L0ZpbGVQYXRoUnVsZT4NCiAgICA8RmlsZVBhdGhSdWxlIElkPSI2NGFkNDZmZi0wZDcxLTRmYTAtYTMwYi0zZjNkMzBjNTQzM2QiIE5hbWU9IihEZWZhdWx0IFJ1bGUpIEFsbCBXaW5kb3dzIEluc3RhbGxlciBmaWxlcyIgRGVzY3JpcHRpb249IkFsbG93cyBtZW1iZXJzIG9mIHRoZSBsb2NhbCBBZG1pbmlzdHJhdG9ycyBncm91cCB0byBydW4gYWxsIFdpbmRvd3MgSW5zdGFsbGVyIGZpbGVzLiIgVXNlck9yR3JvdXBTaWQ9IlMtMS01LTMyLTU0NCIgQWN0aW9uPSJBbGxvdyI+DQogICAgICA8Q29uZGl0aW9ucz4NCiAgICAgICAgPEZpbGVQYXRoQ29uZGl0aW9uIFBhdGg9IiouKiIgLz4NCiAgICAgIDwvQ29uZGl0aW9ucz4NCiAgICA8L0ZpbGVQYXRoUnVsZT4NCiAgICA8RmlsZVB1Ymxpc2hlclJ1bGUgSWQ9IjFlZjUzZDIxLWIzMjgtNDc3ZS04YmUzLTJlZmRjMDMxZmJlOCIgTmFtZT0iTWljcm9zb2Z0IFRlYW1zOiBTaWduZXIvcHJvZHVjdCBydWxlIGZvciBPPU1JQ1JPU09GVCBDT1JQT1JBVElPTiwgTD1SRURNT05ELCBTPVdBU0hJTkdUT04sIEM9VVMvTUlDUk9TT0ZUIFRFQU1TIiBEZXNjcmlwdGlvbj0iSW5mb3JtYXRpb24gYWNxdWlyZWQgZnJvbSBUcnVzdGVkU2lnbmVycy5wczEiIFVzZXJPckdyb3VwU2lkPSJTLTEtMS0wIiBBY3Rpb249IkFsbG93Ij4NCiAgICAgIDxDb25kaXRpb25zPg0KICAgICAgICA8RmlsZVB1Ymxpc2hlckNvbmRpdGlvbiBQdWJsaXNoZXJOYW1lPSJPPU1JQ1JPU09GVCBDT1JQT1JBVElPTiwgTD1SRURNT05ELCBTPVdBU0hJTkdUT04sIEM9VVMiIFByb2R1Y3ROYW1lPSJNSUNST1NPRlQgVEVBTVMiIEJpbmFyeU5hbWU9IioiPg0KICAgICAgICAgIDxCaW5hcnlWZXJzaW9uUmFuZ2UgTG93U2VjdGlvbj0iKiIgSGlnaFNlY3Rpb249IioiIC8+DQogICAgICAgIDwvRmlsZVB1Ymxpc2hlckNvbmRpdGlvbj4NCiAgICAgIDwvQ29uZGl0aW9ucz4NCiAgICA8L0ZpbGVQdWJsaXNoZXJSdWxlPg0KICAgIDxGaWxlUHVibGlzaGVyUnVsZSBJZD0iOTgxMzkyZTQtYmMyMy00MGM2LWJiOGUtZjljZmVhZWI1Y2M1IiBOYW1lPSJNaWNyb3NvZnQtc2lnbmVkIE1TSSBmaWxlczogU2lnbmVyIHJ1bGUgZm9yIE89TUlDUk9TT0ZUIENPUlBPUkFUSU9OLCBMPVJFRE1PTkQsIFM9V0FTSElOR1RPTiwgQz1VUyIgRGVzY3JpcHRpb249IkluZm9ybWF0aW9uIGFjcXVpcmVkIGZyb20gVHJ1c3RlZFNpZ25lcnMucHMxIiBVc2VyT3JHcm91cFNpZD0iUy0xLTEtMCIgQWN0aW9uPSJBbGxvdyI+DQogICAgICA8Q29uZGl0aW9ucz4NCiAgICAgICAgPEZpbGVQdWJsaXNoZXJDb25kaXRpb24gUHVibGlzaGVyTmFtZT0iTz1NSUNST1NPRlQgQ09SUE9SQVRJT04sIEw9UkVETU9ORCwgUz1XQVNISU5HVE9OLCBDPVVTIiBQcm9kdWN0TmFtZT0iKiIgQmluYXJ5TmFtZT0iKiI+DQogICAgICAgICAgPEJpbmFyeVZlcnNpb25SYW5nZSBMb3dTZWN0aW9uPSIqIiBIaWdoU2VjdGlvbj0iKiIgLz4NCiAgICAgICAgPC9GaWxlUHVibGlzaGVyQ29uZGl0aW9uPg0KICAgICAgPC9Db25kaXRpb25zPg0KICAgIDwvRmlsZVB1Ymxpc2hlclJ1bGU+DQogIDwvUnVsZUNvbGxlY3Rpb24+"
        },
        {
            "@odata.type":  "#microsoft.graph.omaSettingStringXml",
            "displayName":  "AaronLocker Script",
            "description":  "AppLocker Configuration for scripts",
            "omaUri":  "./Vendor/MSFT/AppLocker/ApplicationLaunchRestrictions/ScriptGroup/Script/Policy",
            "fileName":  "AppLockerRules-20191123-2058-Enforce - SCRIPT.xml",
            "value":  "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjxSdWxlQ29sbGVjdGlvbiBUeXBlPSJTY3JpcHQiIEVuZm9yY2VtZW50TW9kZT0iRW5hYmxlZCI+DQogICAgPEZpbGVQYXRoUnVsZSBJZD0iZWQ5N2QwY2ItMTVmZi00MzBmLWI4MmMtOGQ3ODMyOTU3NzI1IiBOYW1lPSIoRGVmYXVsdCBSdWxlKSBBbGwgc2NyaXB0cyIgRGVzY3JpcHRpb249IkFsbG93cyBtZW1iZXJzIG9mIHRoZSBsb2NhbCBBZG1pbmlzdHJhdG9ycyBncm91cCB0byBydW4gYWxsIHNjcmlwdHMuIiBVc2VyT3JHcm91cFNpZD0iUy0xLTUtMzItNTQ0IiBBY3Rpb249IkFsbG93Ij4NCiAgICAgIDxDb25kaXRpb25zPg0KICAgICAgICA8RmlsZVBhdGhDb25kaXRpb24gUGF0aD0iKiIgLz4NCiAgICAgIDwvQ29uZGl0aW9ucz4NCiAgICA8L0ZpbGVQYXRoUnVsZT4NCiAgICA8RmlsZVBhdGhSdWxlIElkPSI3NDJjMDg5YS1kNWJjLTRmMWUtOThkYy0yNTM1YjdiMTY0YjUiIE5hbWU9IkFsbCBzY3JpcHRzIGxvY2F0ZWQgaW4gdGhlIFByb2dyYW0gRmlsZXMgZm9sZGVyIiBEZXNjcmlwdGlvbj0iQWxsb3dzIG1lbWJlcnMgb2YgdGhlIEV2ZXJ5b25lIGdyb3VwIHRvIHJ1biBzY3JpcHRzIHRoYXQgYXJlIGxvY2F0ZWQgaW4gdGhlIFByb2dyYW0gRmlsZXMgZm9sZGVyLiIgVXNlck9yR3JvdXBTaWQ9IlMtMS0xLTAiIEFjdGlvbj0iQWxsb3ciPg0KICAgICAgPENvbmRpdGlvbnM+DQogICAgICAgIDxGaWxlUGF0aENvbmRpdGlvbiBQYXRoPSIlUFJPR1JBTUZJTEVTJVwqIiAvPg0KICAgICAgPC9Db25kaXRpb25zPg0KICAgICAgPEV4Y2VwdGlvbnM+DQogICAgICAgIDxGaWxlUGF0aENvbmRpdGlvbiBQYXRoPSIlUFJPR1JBTUZJTEVTJVxnb29nbGVcY2hyb21lXGFwcGxpY2F0aW9uXHNldHVwbWV0cmljc1wqIiAvPg0KICAgICAgICA8RmlsZVBhdGhDb25kaXRpb24gUGF0aD0iJVBST0dSQU1GSUxFUyVcbWljcm9zb2Z0IG9uZWRyaXZlXHVwZGF0ZVwqIiAvPg0KICAgICAgICA8RmlsZVBhdGhDb25kaXRpb24gUGF0aD0iJVBST0dSQU1GSUxFUyVcbWljcm9zb2Z0XGVkZ2UgYmV0YVxhcHBsaWNhdGlvblxzZXR1cG1ldHJpY3NcKiIgLz4NCiAgICAgICAgPEZpbGVQYXRoQ29uZGl0aW9uIFBhdGg9IiVQUk9HUkFNRklMRVMlXG1pY3Jvc29mdFxlZGdlIGRldlxhcHBsaWNhdGlvblxzZXR1cG1ldHJpY3NcKiIgLz4NCiAgICAgIDwvRXhjZXB0aW9ucz4NCiAgICA8L0ZpbGVQYXRoUnVsZT4NCiAgICA8RmlsZVBhdGhSdWxlIElkPSIyZDJlMjcxNS01MGQxLTRmMzItOTg4NS03YzkzNWUxODlmNDQiIE5hbWU9IkFsbCBzY3JpcHRzIGxvY2F0ZWQgaW4gdGhlIFdpbmRvd3MgZm9sZGVyIiBEZXNjcmlwdGlvbj0iQWxsb3dzIG1lbWJlcnMgb2YgdGhlIEV2ZXJ5b25lIGdyb3VwIHRvIHJ1biBzY3JpcHRzIHRoYXQgYXJlIGxvY2F0ZWQgaW4gdGhlIFdpbmRvd3MgZm9sZGVyLiIgVXNlck9yR3JvdXBTaWQ9IlMtMS0xLTAiIEFjdGlvbj0iQWxsb3ciPg0KICAgICAgPENvbmRpdGlvbnM+DQogICAgICAgIDxGaWxlUGF0aENvbmRpdGlvbiBQYXRoPSIlV0lORElSJVwqIiAvPg0KICAgICAgPC9Db25kaXRpb25zPg0KICAgICAgPEV4Y2VwdGlvbnM+DQogICAgICAgIDxGaWxlUGF0aENvbmRpdGlvbiBQYXRoPSIlV0lORElSJVxpbWVjYWNoZVwxMWExOGRiYy1hYjIxLTQ5NmQtOTBkNC05OGIzN2ZmZGQ3ZDRfMVwqIiAvPg0KICAgICAgICA8RmlsZVBhdGhDb25kaXRpb24gUGF0aD0iJVdJTkRJUiVcaW1lY2FjaGVcMTFhMThkYmMtYWIyMS00OTZkLTkwZDQtOThiMzdmZmRkN2Q0XzE6KiIgLz4NCiAgICAgICAgPEZpbGVQYXRoQ29uZGl0aW9uIFBhdGg9IiVXSU5ESVIlXHJlZ2lzdHJhdGlvblxjcm1sb2dcKiIgLz4NCiAgICAgICAgPEZpbGVQYXRoQ29uZGl0aW9uIFBhdGg9IiVXSU5ESVIlXHNlcnZpY2VzdGF0ZVxkZXRlY3Rpb252ZXJpZmljYXRpb25kcnZcZGF0YVwqIiAvPg0KICAgICAgICA8RmlsZVBhdGhDb25kaXRpb24gUGF0aD0iJVdJTkRJUiVcc2VydmljZXN0YXRlXGRldGVjdGlvbnZlcmlmaWNhdGlvbmRydlxkYXRhOioiIC8+DQogICAgICAgIDxGaWxlUGF0aENvbmRpdGlvbiBQYXRoPSIlV0lORElSJVxzZXJ2aWNlc3RhdGVcZXNpZl91bWRmMlxkYXRhXCoiIC8+DQogICAgICAgIDxGaWxlUGF0aENvbmRpdGlvbiBQYXRoPSIlV0lORElSJVxzZXJ2aWNlc3RhdGVcZXNpZl91bWRmMlxkYXRhOioiIC8+DQogICAgICAgIDxGaWxlUGF0aENvbmRpdGlvbiBQYXRoPSIlV0lORElSJVxzZXJ2aWNlc3RhdGVcaGVsbG9mYWNlXGRhdGFcKiIgLz4NCiAgICAgICAgPEZpbGVQYXRoQ29uZGl0aW9uIFBhdGg9IiVXSU5ESVIlXHNlcnZpY2VzdGF0ZVxoZWxsb2ZhY2VcZGF0YToqIiAvPg0KICAgICAgICA8RmlsZVBhdGhDb25kaXRpb24gUGF0aD0iJVdJTkRJUiVcc2VydmljZXN0YXRlXGhpZG92ZXJnYXR0XGRhdGFcKiIgLz4NCiAgICAgICAgPEZpbGVQYXRoQ29uZGl0aW9uIFBhdGg9IiVXSU5ESVIlXHNlcnZpY2VzdGF0ZVxoaWRvdmVyZ2F0dFxkYXRhOioiIC8+DQogICAgICAgIDxGaWxlUGF0aENvbmRpdGlvbiBQYXRoPSIlV0lORElSJVxzZXJ2aWNlc3RhdGVcc2Vuc29yc2N4MDEwMlxkYXRhXCoiIC8+DQogICAgICAgIDxGaWxlUGF0aENvbmRpdGlvbiBQYXRoPSIlV0lORElSJVxzZXJ2aWNlc3RhdGVcc2Vuc29yc2N4MDEwMlxkYXRhOioiIC8+DQogICAgICAgIDxGaWxlUGF0aENvbmRpdGlvbiBQYXRoPSIlV0lORElSJVxzZXJ2aWNlc3RhdGVcc2Vuc29yc2hpZGNsYXNzZHJpdmVyXGRhdGFcKiIgLz4NCiAgICAgICAgPEZpbGVQYXRoQ29uZGl0aW9uIFBhdGg9IiVXSU5ESVIlXHNlcnZpY2VzdGF0ZVxzZW5zb3JzaGlkY2xhc3Nkcml2ZXJcZGF0YToqIiAvPg0KICAgICAgICA8RmlsZVBhdGhDb25kaXRpb24gUGF0aD0iJVdJTkRJUiVcc2VydmljZXN0YXRlXHN1cmZhY2ViYXNlMmZ3dXBkYXRlXGRhdGFcKiIgLz4NCiAgICAgICAgPEZpbGVQYXRoQ29uZGl0aW9uIFBhdGg9IiVXSU5ESVIlXHNlcnZpY2VzdGF0ZVxzdXJmYWNlYmFzZTJmd3VwZGF0ZVxkYXRhOioiIC8+DQogICAgICAgIDxGaWxlUGF0aENvbmRpdGlvbiBQYXRoPSIlV0lORElSJVxzZXJ2aWNlc3RhdGVcc3VyZmFjZWRpYWxkZXRlY3Rpb25cZGF0YVwqIiAvPg0KICAgICAgICA8RmlsZVBhdGhDb25kaXRpb24gUGF0aD0iJVdJTkRJUiVcc2VydmljZXN0YXRlXHN1cmZhY2VkaWFsZGV0ZWN0aW9uXGRhdGE6KiIgLz4NCiAgICAgICAgPEZpbGVQYXRoQ29uZGl0aW9uIFBhdGg9IiVXSU5ESVIlXHNlcnZpY2VzdGF0ZVxzdXJmYWNlZG9ja2Z3dXBkYXRlXGRhdGFcKiIgLz4NCiAgICAgICAgPEZpbGVQYXRoQ29uZGl0aW9uIFBhdGg9IiVXSU5ESVIlXHNlcnZpY2VzdGF0ZVxzdXJmYWNlZG9ja2Z3dXBkYXRlXGRhdGE6KiIgLz4NCiAgICAgICAgPEZpbGVQYXRoQ29uZGl0aW9uIFBhdGg9IiVXSU5ESVIlXHNlcnZpY2VzdGF0ZVxzdXJmYWNlZHR4ZHJpdmVyXGRhdGFcKiIgLz4NCiAgICAgICAgPEZpbGVQYXRoQ29uZGl0aW9uIFBhdGg9IiVXSU5ESVIlXHNlcnZpY2VzdGF0ZVxzdXJmYWNlZHR4ZHJpdmVyXGRhdGE6KiIgLz4NCiAgICAgICAgPEZpbGVQYXRoQ29uZGl0aW9uIFBhdGg9IiVXSU5ESVIlXHNlcnZpY2VzdGF0ZVxzdXJmYWNla2V5Ym9hcmRiYWNrbGlnaHRcZGF0YVwqIiAvPg0KICAgICAgICA8RmlsZVBhdGhDb25kaXRpb24gUGF0aD0iJVdJTkRJUiVcc2VydmljZXN0YXRlXHN1cmZhY2VrZXlib2FyZGJhY2tsaWdodFxkYXRhOioiIC8+DQogICAgICAgIDxGaWxlUGF0aENvbmRpdGlvbiBQYXRoPSIlV0lORElSJVxzZXJ2aWNlc3RhdGVcc3VyZmFjZXBlbnBhaXJpbmdcZGF0YVwqIiAvPg0KICAgICAgICA8RmlsZVBhdGhDb25kaXRpb24gUGF0aD0iJVdJTkRJUiVcc2VydmljZXN0YXRlXHN1cmZhY2VwZW5wYWlyaW5nXGRhdGE6KiIgLz4NCiAgICAgICAgPEZpbGVQYXRoQ29uZGl0aW9uIFBhdGg9IiVXSU5ESVIlXHNlcnZpY2VzdGF0ZVxzdXJmYWNlc2FybWFuYWdlclxkYXRhXCoiIC8+DQogICAgICAgIDxGaWxlUGF0aENvbmRpdGlvbiBQYXRoPSIlV0lORElSJVxzZXJ2aWNlc3RhdGVcc3VyZmFjZXNhcm1hbmFnZXJcZGF0YToqIiAvPg0KICAgICAgICA8RmlsZVBhdGhDb25kaXRpb24gUGF0aD0iJVNZU1RFTTMyJVxjb21cZG1wXCoiIC8+DQogICAgICAgIDxGaWxlUGF0aENvbmRpdGlvbiBQYXRoPSIlU1lTVEVNMzIlXGNvbmZpZ1xzeXN0ZW1wcm9maWxlXGFwcGRhdGFcbG9jYWxcbWljcm9zb2Z0XGNyZWRlbnRpYWxzXCoiIC8+DQogICAgICAgIDxGaWxlUGF0aENvbmRpdGlvbiBQYXRoPSIlU1lTVEVNMzIlXGNvbmZpZ1xzeXN0ZW1wcm9maWxlXGFwcGRhdGFcbG9jYWxcbWljcm9zb2Z0XGNyZWRlbnRpYWxzOioiIC8+DQogICAgICAgIDxGaWxlUGF0aENvbmRpdGlvbiBQYXRoPSIlU1lTVEVNMzIlXGNvbmZpZ1xzeXN0ZW1wcm9maWxlXGFwcGRhdGFcbG9jYWxcbWljcm9zb2Z0XGNyeXB0b1xwY3Brc3BcKiIgLz4NCiAgICAgICAgPEZpbGVQYXRoQ29uZGl0aW9uIFBhdGg9IiVTWVNURU0zMiVcY29uZmlnXHN5c3RlbXByb2ZpbGVcYXBwZGF0YVxsb2NhbFxtaWNyb3NvZnRcY3J5cHRvXHBjcGtzcDoqIiAvPg0KICAgICAgICA8RmlsZVBhdGhDb25kaXRpb24gUGF0aD0iJVNZU1RFTTMyJVxjb25maWdcc3lzdGVtcHJvZmlsZVxhcHBkYXRhXGxvY2FsXG1pY3Jvc29mdFx3aW5kb3dzXGNsb3VkYXBjYWNoZVwqIiAvPg0KICAgICAgICA8RmlsZVBhdGhDb25kaXRpb24gUGF0aD0iJVNZU1RFTTMyJVxjb25maWdcc3lzdGVtcHJvZmlsZVxhcHBkYXRhXGxvY2FsXG1pY3Jvc29mdFx3aW5kb3dzXGNsb3VkYXBjYWNoZToqIiAvPg0KICAgICAgICA8RmlsZVBhdGhDb25kaXRpb24gUGF0aD0iJVNZU1RFTTMyJVxjb25maWdcc3lzdGVtcHJvZmlsZVxhcHBkYXRhXGxvY2FsXG1pY3Jvc29mdFx3aW5kb3dzXG5vdGlmaWNhdGlvbnNcKiIgLz4NCiAgICAgICAgPEZpbGVQYXRoQ29uZGl0aW9uIFBhdGg9IiVTWVNURU0zMiVcY29uZmlnXHN5c3RlbXByb2ZpbGVcYXBwZGF0YVxsb2NhbFxtaWNyb3NvZnRcd2luZG93c1xub3RpZmljYXRpb25zOioiIC8+DQogICAgICAgIDxGaWxlUGF0aENvbmRpdGlvbiBQYXRoPSIlU1lTVEVNMzIlXGNvbmZpZ1xzeXN0ZW1wcm9maWxlXGFwcGRhdGFcbG9jYWxccGFja2FnZXNcd2RhZ3JkcGNsaWVudGFwcGNvbnRhaW5lclxhY1wqIiAvPg0KICAgICAgICA8RmlsZVBhdGhDb25kaXRpb24gUGF0aD0iJVNZU1RFTTMyJVxjb25maWdcc3lzdGVtcHJvZmlsZVxhcHBkYXRhXGxvY2FsXHBvbGljeW1hbmFnZXJcKiIgLz4NCiAgICAgICAgPEZpbGVQYXRoQ29uZGl0aW9uIFBhdGg9IiVTWVNURU0zMiVcY29uZmlnXHN5c3RlbXByb2ZpbGVcYXBwZGF0YVxsb2NhbFxwb2xpY3ltYW5hZ2VyOioiIC8+DQogICAgICAgIDxGaWxlUGF0aENvbmRpdGlvbiBQYXRoPSIlU1lTVEVNMzIlXGNvbmZpZ1xzeXN0ZW1wcm9maWxlXGFwcGRhdGFccm9hbWluZ1xtaWNyb3NvZnRcc3lzdGVtY2VydGlmaWNhdGVzXG15XGNlcnRpZmljYXRlc1wqIiAvPg0KICAgICAgICA8RmlsZVBhdGhDb25kaXRpb24gUGF0aD0iJVNZU1RFTTMyJVxjb25maWdcc3lzdGVtcHJvZmlsZVxhcHBkYXRhXHJvYW1pbmdcbWljcm9zb2Z0XHN5c3RlbWNlcnRpZmljYXRlc1xteVxjZXJ0aWZpY2F0ZXM6KiIgLz4NCiAgICAgICAgPEZpbGVQYXRoQ29uZGl0aW9uIFBhdGg9IiVTWVNURU0zMiVcZHJpdmVyc1xkcml2ZXJkYXRhXCoiIC8+DQogICAgICAgIDxGaWxlUGF0aENvbmRpdGlvbiBQYXRoPSIlU1lTVEVNMzIlXGRyaXZlcnNcZHJpdmVyZGF0YToqIiAvPg0KICAgICAgICA8RmlsZVBhdGhDb25kaXRpb24gUGF0aD0iJVNZU1RFTTMyJVxmeHN0bXBcKiIgLz4NCiAgICAgICAgPEZpbGVQYXRoQ29uZGl0aW9uIFBhdGg9IiVTWVNURU0zMiVcc3Bvb2xcZHJpdmVyc1xjb2xvclwqIiAvPg0KICAgICAgICA8RmlsZVBhdGhDb25kaXRpb24gUGF0aD0iJVNZU1RFTTMyJVxzcG9vbFxwcmludGVyc1wqIiAvPg0KICAgICAgICA8RmlsZVBhdGhDb25kaXRpb24gUGF0aD0iJVNZU1RFTTMyJVxzcG9vbFxzZXJ2ZXJzXCoiIC8+DQogICAgICAgIDxGaWxlUGF0aENvbmRpdGlvbiBQYXRoPSIlU1lTVEVNMzIlXHRhc2tzXCoiIC8+DQogICAgICAgIDxGaWxlUGF0aENvbmRpdGlvbiBQYXRoPSIlU1lTVEVNMzIlXHRhc2tzX21pZ3JhdGVkXCoiIC8+DQogICAgICAgIDxGaWxlUGF0aENvbmRpdGlvbiBQYXRoPSIlV0lORElSJVx0YXNrc1wqIiAvPg0KICAgICAgICA8RmlsZVBhdGhDb25kaXRpb24gUGF0aD0iJVdJTkRJUiVcdGVtcFwqIiAvPg0KICAgICAgICA8RmlsZVBhdGhDb25kaXRpb24gUGF0aD0iJVdJTkRJUiVcdHJhY2luZ1wqIiAvPg0KICAgICAgICA8RmlsZVBhdGhDb25kaXRpb24gUGF0aD0iJVdJTkRJUiVcdHJhY2luZzoqIiAvPg0KICAgICAgPC9FeGNlcHRpb25zPg0KICAgIDwvRmlsZVBhdGhSdWxlPg0KICAgIDxGaWxlUGF0aFJ1bGUgSWQ9ImJhOTZjNGNkLWZjZGItNDA4ZS05ZDRmLWJhNjNmNGVmNjBlYiIgTmFtZT0iQWRkaXRpb25hbCBhbGxvd2VkIHBhdGg6ICVPU0RSSVZFJVxQUk9HUkFNREFUQVxNSUNST1NPRlRcV0lORE9XUyBERUZFTkRFUlxQTEFURk9STVwqIiBEZXNjcmlwdGlvbj0iQWxsb3dzIEV2ZXJ5b25lIHRvIGV4ZWN1dGUgZnJvbSAlT1NEUklWRSVcUFJPR1JBTURBVEFcTUlDUk9TT0ZUXFdJTkRPV1MgREVGRU5ERVJcUExBVEZPUk1cKiIgVXNlck9yR3JvdXBTaWQ9IlMtMS0xLTAiIEFjdGlvbj0iQWxsb3ciPg0KICAgICAgPENvbmRpdGlvbnM+DQogICAgICAgIDxGaWxlUGF0aENvbmRpdGlvbiBQYXRoPSIlT1NEUklWRSVcUFJPR1JBTURBVEFcTUlDUk9TT0ZUXFdJTkRPV1MgREVGRU5ERVJcUExBVEZPUk1cKiIgLz4NCiAgICAgIDwvQ29uZGl0aW9ucz4NCiAgICA8L0ZpbGVQYXRoUnVsZT4NCiAgICA8RmlsZVB1Ymxpc2hlclJ1bGUgSWQ9Ijk5ODkwYWVkLTRkOGUtNDZmNC1hMzA0LTFhYmI3YmMyZDM5YiIgTmFtZT0iTWljcm9zb2Z0IFRlYW1zOiBTaWduZXIvcHJvZHVjdCBydWxlIGZvciBPPU1JQ1JPU09GVCBDT1JQT1JBVElPTiwgTD1SRURNT05ELCBTPVdBU0hJTkdUT04sIEM9VVMvTUlDUk9TT0ZUIFRFQU1TIiBEZXNjcmlwdGlvbj0iSW5mb3JtYXRpb24gYWNxdWlyZWQgZnJvbSBUcnVzdGVkU2lnbmVycy5wczEiIFVzZXJPckdyb3VwU2lkPSJTLTEtMS0wIiBBY3Rpb249IkFsbG93Ij4NCiAgICAgIDxDb25kaXRpb25zPg0KICAgICAgICA8RmlsZVB1Ymxpc2hlckNvbmRpdGlvbiBQdWJsaXNoZXJOYW1lPSJPPU1JQ1JPU09GVCBDT1JQT1JBVElPTiwgTD1SRURNT05ELCBTPVdBU0hJTkdUT04sIEM9VVMiIFByb2R1Y3ROYW1lPSJNSUNST1NPRlQgVEVBTVMiIEJpbmFyeU5hbWU9IioiPg0KICAgICAgICAgIDxCaW5hcnlWZXJzaW9uUmFuZ2UgTG93U2VjdGlvbj0iKiIgSGlnaFNlY3Rpb249IioiIC8+DQogICAgICAgIDwvRmlsZVB1Ymxpc2hlckNvbmRpdGlvbj4NCiAgICAgIDwvQ29uZGl0aW9ucz4NCiAgICA8L0ZpbGVQdWJsaXNoZXJSdWxlPg0KICAgIDxGaWxlUHVibGlzaGVyUnVsZSBJZD0iZTU5N2IyOWYtOWYzZC00NTdmLTllZTctMjBlYWE0NmQ5ODAzIiBOYW1lPSJNaWNyb3NvZnQtc2lnbmVkIHNjcmlwdCBmaWxlczogU2lnbmVyIHJ1bGUgZm9yIE89TUlDUk9TT0ZUIENPUlBPUkFUSU9OLCBMPVJFRE1PTkQsIFM9V0FTSElOR1RPTiwgQz1VUyIgRGVzY3JpcHRpb249IkluZm9ybWF0aW9uIGFjcXVpcmVkIGZyb20gVHJ1c3RlZFNpZ25lcnMucHMxIiBVc2VyT3JHcm91cFNpZD0iUy0xLTEtMCIgQWN0aW9uPSJBbGxvdyI+DQogICAgICA8Q29uZGl0aW9ucz4NCiAgICAgICAgPEZpbGVQdWJsaXNoZXJDb25kaXRpb24gUHVibGlzaGVyTmFtZT0iTz1NSUNST1NPRlQgQ09SUE9SQVRJT04sIEw9UkVETU9ORCwgUz1XQVNISU5HVE9OLCBDPVVTIiBQcm9kdWN0TmFtZT0iKiIgQmluYXJ5TmFtZT0iKiI+DQogICAgICAgICAgPEJpbmFyeVZlcnNpb25SYW5nZSBMb3dTZWN0aW9uPSIqIiBIaWdoU2VjdGlvbj0iKiIgLz4NCiAgICAgICAgPC9GaWxlUHVibGlzaGVyQ29uZGl0aW9uPg0KICAgICAgPC9Db25kaXRpb25zPg0KICAgIDwvRmlsZVB1Ymxpc2hlclJ1bGU+DQogICAgPEZpbGVIYXNoUnVsZSBJZD0iZjJmMWU3MTctYmIxYi00ZDZhLTgxYzItMzdlMjk1ZWRiZjRmIiBOYW1lPSJPbmVEcml2ZSAoV2luMTAgdjE2MDcgaW5pdGlhbCBzdGF0ZSk6IENvbGxlY3RPbmVEcml2ZUxvZ3MuYmF0IC0gSEFTSCBSVUxFIiBEZXNjcmlwdGlvbj0iSWRlbnRpZmllZCBpbjogJU9TRFJJVkUlXFVTRVJTXHRlc3R1c2VyXEFQUERBVEFcTE9DQUxcTUlDUk9TT0ZUXE9ORURSSVZFXDE3LjMuNjM4MS4wNDA1XENPTExFQ1RPTkVEUklWRUxPR1MuQkFUIiBVc2VyT3JHcm91cFNpZD0iUy0xLTEtMCIgQWN0aW9uPSJBbGxvdyI+DQogICAgICA8Q29uZGl0aW9ucz4NCiAgICAgICAgPEZpbGVIYXNoQ29uZGl0aW9uPg0KICAgICAgICAgIDxGaWxlSGFzaCBUeXBlPSJTSEEyNTYiIERhdGE9IjB4Q0RGQzI4NjE4RTg4MzFDRkEyRjI0ODc1ODdDQzU1RjQwRDY4NjhBNEY5MTI3NjM3MzhBNTk3NUVDNUY0OTBBQiIgU291cmNlRmlsZU5hbWU9IkNvbGxlY3RPbmVEcml2ZUxvZ3MuYmF0IiBTb3VyY2VGaWxlTGVuZ3RoPSI1ODUwIiAvPg0KICAgICAgICA8L0ZpbGVIYXNoQ29uZGl0aW9uPg0KICAgICAgPC9Db25kaXRpb25zPg0KICAgIDwvRmlsZUhhc2hSdWxlPg0KICAgIDxGaWxlSGFzaFJ1bGUgSWQ9ImFjNjAwMTRlLTJhMjktNDVkYS1hYmM2LWUzYmVkNTQ2NTJmZCIgTmFtZT0iT25lRHJpdmUgKFdpbjEwIHYxODAzIGluaXRpYWwgc3RhdGUpOiBPbmVEcml2ZVBlcnNvbmFsLmNtZCAtIEhBU0ggUlVMRSIgRGVzY3JpcHRpb249IklkZW50aWZpZWQgaW46ICVPU0RSSVZFJVxVU0VSU1x0ZXN0dXNlclxBUFBEQVRBXExPQ0FMXE1JQ1JPU09GVFxPTkVEUklWRVxPTkVEUklWRVBFUlNPTkFMLkNNRCIgVXNlck9yR3JvdXBTaWQ9IlMtMS0xLTAiIEFjdGlvbj0iQWxsb3ciPg0KICAgICAgPENvbmRpdGlvbnM+DQogICAgICAgIDxGaWxlSGFzaENvbmRpdGlvbj4NCiAgICAgICAgICA8RmlsZUhhc2ggVHlwZT0iU0hBMjU2IiBEYXRhPSIweDY5QTE3QTQ4OTlFMUFEM0U1RkY0MkY3QTI0REQ0N0M1MTMwREJBRDJDREVFN0UzQzhGQkZEQjIzOEY1QTIwRUUiIFNvdXJjZUZpbGVOYW1lPSJPbmVEcml2ZVBlcnNvbmFsLmNtZCIgU291cmNlRmlsZUxlbmd0aD0iNzciIC8+DQogICAgICAgIDwvRmlsZUhhc2hDb25kaXRpb24+DQogICAgICA8L0NvbmRpdGlvbnM+DQogICAgPC9GaWxlSGFzaFJ1bGU+DQogICAgPEZpbGVIYXNoUnVsZSBJZD0iMjhlNTVlNWQtZjU1My00YmUxLWIxYTYtZDVjOTg3MDFiODE3IiBOYW1lPSJPbmVEcml2ZSAoV2luMTAgdjE4MDkgaW5pdGlhbCBzdGF0ZSk6IENvbGxlY3RTeW5jTG9ncy5iYXQgLSBIQVNIIFJVTEUiIERlc2NyaXB0aW9uPSJJZGVudGlmaWVkIGluOiAlT1NEUklWRSVcVVNFUlNcQUJCWVxBUFBEQVRBXExPQ0FMXE1JQ1JPU09GVFxPTkVEUklWRVwxOC4xNDMuMDcxNy4wMDAyXENPTExFQ1RTWU5DTE9HUy5CQVQiIFVzZXJPckdyb3VwU2lkPSJTLTEtMS0wIiBBY3Rpb249IkFsbG93Ij4NCiAgICAgIDxDb25kaXRpb25zPg0KICAgICAgICA8RmlsZUhhc2hDb25kaXRpb24+DQogICAgICAgICAgPEZpbGVIYXNoIFR5cGU9IlNIQTI1NiIgRGF0YT0iMHgzNzAyQThDRkMwMjhBMDFCMDZBMUU0MzM1NEYwMkM5OTgzNkVFRjA3Rjg4NzZENDYyNkRFRjk2NjQ0NjA2MkFGIiBTb3VyY2VGaWxlTmFtZT0iQ29sbGVjdFN5bmNMb2dzLmJhdCIgU291cmNlRmlsZUxlbmd0aD0iNjQyMCIgLz4NCiAgICAgICAgPC9GaWxlSGFzaENvbmRpdGlvbj4NCiAgICAgIDwvQ29uZGl0aW9ucz4NCiAgICA8L0ZpbGVIYXNoUnVsZT4NCiAgPC9SdWxlQ29sbGVjdGlvbj4="
        },
        {
            "@odata.type":  "#microsoft.graph.omaSettingStringXml",
            "displayName":  "AaronLocker DLL",
            "description":  "AppLocker configuration for DLLs",
            "omaUri":  "./Vendor/MSFT/AppLocker/ApplicationLaunchRestrictions/DLLGroup/DLL/Policy",
            "fileName":  "AppLockerRules-20191123-2058-Enforce - DLL.xml",
            "value":  ""
        }
    ]
}


"@
####################################################

Add-DeviceConfigurationPolicy -Json $Aaronlocker




